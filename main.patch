diff --git a/main.py b/main.py
--- a/main.py
+++ b/main.py
@@ -11,7 +11,7 @@
 import cv2
 from core.watchdog import watchdog_process_check
 from core.ss_capture import capture_and_save_screenshot
-from core.automation_state import AUTOMATION, RunState
+from core.automation_state import AUTOMATION
 from core.state_detector import detect_state_and_overlays
 from handlers.game_over_handler import handle_game_over
 from handlers.home_screen_handler import handle_home_screen
@@ -21,12 +21,11 @@
 
 parser = argparse.ArgumentParser()
 parser.add_argument("--no-restart", action="store_true", help="Disable auto restart on home screen")
 args = parser.parse_args()
 AUTO_START_ENABLED = not args.no_restart
 log(f"AUTO_START_ENABLED = {AUTO_START_ENABLED}", "DEBUG")
-
-AUTO_START_ENABLED = not args.no_restart
 
 def main():
     log("Starting main heartbeat loop.", level="INFO")
     threading.Thread(target=watchdog_process_check, daemon=True).start()
-
-    while True:
+    last_ui_state = None
+    while True:
         img = capture_and_save_screenshot()
         if img is None:
             log("Failed to capture screenshot.", level="FAIL")
             time.sleep(2)
             continue
@@ -36,12 +35,10 @@
-        new_state = detection["state"]
+        new_state = detection["state"]           # e.g., "GAME_OVER", "HOME_SCREEN"
         overlays = detection["overlays"]
-        old_state = AUTOMATION.state
-        if new_state != old_state:
-            log(f"State change: {old_state} → {new_state}", "STATE")
-            AUTOMATION.state = new_state
+        if new_state != last_ui_state:
+            log(f"UI state change: {last_ui_state} → {new_state}", "STATE")
+            last_ui_state = new_state
 
         # Handle known states
         if new_state == "GAME_OVER":
             log("Detected GAME OVER. Executing handler.", "INFO")
             handle_game_over()
